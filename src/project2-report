Project 2 Report
=============================
In this phase, we implemented the remaining functions in RBFM layer and those in RM layer.

In RBFM, the program now supports record update, deletion and reorganizing pages.

1. Delete record(s)
We delete records by marking their slot directories with a special notation. We simply change its start postion into PAGE_SIZE, its record length into 0.

2. Update record(s)
Scenario 1: When the new record data has smaller or equal size with that of the current one, data can be reflected in place.
Scenario 2: When the new record data size exceeds the initial one,
    - If it can still be fit in the same page, insert the updated data into the same page while updating its slot directory with new position and size.
    - Else we have to insert the new data into another page with enough space to fit and leaving a tomb stone in the old page pointing to the new position.
When we leave a tomb stone, we modified the old slot directory by changing the start position into [-newPageNum], the record size into [-newSlotNum], so that later the updateRecord(), deleteRecord(), readRecord(), etc will handle the moved records gracefully.

3. Reorganize pages
We firstly go through the all slot directories in the page buffering slot information of normal slots (not deleted one or tomb stone). Then sort the slot directories by its start position. After that, we compact records by moving them according to the current start position of records.

In RM layer, we need to build catalogs in order to manage each file as a table. Now we have two catalog files
- Tables: record schema (TableId, TableName, FileName)
- Columns: record schema (TableId, AttrType, AttrLength, AttrName)

In order to speed up, we maintain the catalog metadata in memory using the following two maps:
- unordered_map<int, vector<pair<Attribute, RID> > > schemaMap;  // <tableId, vector of <Attribute, RID in file Columns> >
- unordered_map<string, pair<int, RID> > tableNameMap;           // <table name, <tableId, RID in file Tables> >

===========================
Note:
- cleanup.sh helps clean any files generated by test suite.
- We do not implement extra credit functions.
- We use some C++11 features.
